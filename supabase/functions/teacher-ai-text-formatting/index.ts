import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Helper function to convert Markdown to HTML
function convertMarkdownToHTML(text: string): string {
  if (!text || typeof text !== 'string') return text;
  
  return text
    // 1. Bold + Italic (***text***)
    .replace(/\*\*\*(.+?)\*\*\*/g, '<strong><em>$1</em></strong>')
    // 2. Bold (**text**)
    .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
    // 3. Italic (*text*)
    .replace(/\*(.+?)\*/g, '<em>$1</em>')
    // 4. Underline (__text__)
    .replace(/__(.+?)__/g, '<u>$1</u>')
    // 5. Strip remaining markdown headers (safety)
    .replace(/^#{1,6}\s+/gm, '')
    // 6. Clean escaped markdown
    .replace(/\\([*_#])/g, '$1');
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { content, action } = await req.json();
    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');

    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY n√£o configurada');
    }

    console.log(`Processando a√ß√£o pedag√≥gica: ${action}`);

    let systemPrompt = '';
    
    switch (action) {
      case 'improve_grammar':
        systemPrompt = `Voc√™ √© um revisor especializado em textos pedag√≥gicos e acad√™micos.
        
TAREFA: Corrija APENAS erros de:
- Gram√°tica (concord√¢ncia, reg√™ncia, crase)
- Ortografia
- Pontua√ß√£o

IMPORTANTE:
- N√ÉO mude a estrutura do texto
- N√ÉO adicione ou remova conte√∫do
- Mantenha terminologia t√©cnica original
- Mantenha formata√ß√£o HTML (tags <strong>, <em>, <ul>, etc.)
- Retorne APENAS o texto corrigido`;
        break;

      case 'simplify':
        systemPrompt = `Voc√™ √© um especialista em comunica√ß√£o pedag√≥gica clara.
        
TAREFA: Simplifique o texto para ENSINAR de forma mais acess√≠vel:
- Use linguagem direta e objetiva
- Substitua termos t√©cnicos complexos por explica√ß√µes claras (quando poss√≠vel)
- Divida frases longas em senten√ßas curtas
- Adicione exemplos pr√°ticos quando relevante
- Mantenha precis√£o t√©cnica

IMPORTANTE:
- Mantenha formata√ß√£o HTML
- Foco em CLAREZA para ENSINAR
- Retorne APENAS o texto simplificado`;
        break;

      case 'expand':
        systemPrompt = `Voc√™ √© um especialista em desenvolvimento de conte√∫do pedag√≥gico.
        
TAREFA: Expanda o texto com PROFUNDIDADE PEDAG√ìGICA:
- Adicione explica√ß√µes detalhadas sobre os conceitos
- Inclua metodologias de ensino relevantes
- Sugira estrat√©gias did√°ticas
- Proponha exemplos pr√°ticos e aplica√ß√µes
- Antecipe d√∫vidas dos alunos

IMPORTANTE:
- Mantenha formata√ß√£o HTML
- Foco em ENSINAR e FACILITAR APRENDIZAGEM
- Retorne APENAS o texto expandido`;
        break;

      case 'summarize':
        systemPrompt = `Voc√™ √© um especialista em s√≠ntese de conte√∫do pedag√≥gico.
        
TAREFA: Crie um resumo PEDAG√ìGICO conciso:
- Destaque os conceitos-chave de ensino
- Identifique metodologias principais
- Liste objetivos de aprendizagem
- Formato: t√≥picos claros e objetivos

IMPORTANTE:
- Use formata√ß√£o HTML (<ul>, <li>, <strong>)
- M√°ximo 200 palavras
- Foco nos PONTOS CR√çTICOS para ENSINAR
- Retorne APENAS o resumo`;
        break;

      case 'format_lesson_plan':
        systemPrompt = `Voc√™ √© um especialista em planejamento pedag√≥gico para engenharia.
        
TAREFA: Estruture o conte√∫do como PLANO DE AULA:

**Formato HTML:**
<h3>Objetivos de Aprendizagem</h3>
<ul>
  <li>Objetivo 1 (usar verbos de Bloom: analisar, aplicar, avaliar...)</li>
  <li>Objetivo 2</li>
</ul>

<h3>Metodologia</h3>
<p>Descrever estrat√©gia did√°tica (expositiva, ativa, h√≠brida...)</p>

<h3>Conte√∫do Program√°tico</h3>
<ul>
  <li>T√≥pico 1</li>
  <li>T√≥pico 2</li>
</ul>

<h3>Recursos Necess√°rios</h3>
<ul>
  <li>Material 1</li>
  <li>Material 2</li>
</ul>

<h3>Avalia√ß√£o</h3>
<p>Como avaliar aprendizagem (formativa, somativa...)</p>

<h3>Dura√ß√£o Estimada</h3>
<p>Tempo por etapa</p>

IMPORTANTE:
- Use HTML sem√¢ntico
- Seja espec√≠fico e pr√°tico
- Retorne APENAS o HTML estruturado`;
        break;

      case 'create_rubric':
        systemPrompt = `Voc√™ √© um especialista em avalia√ß√£o por compet√™ncias em engenharia.
        
TAREFA: Crie uma RUBRICA DE AVALIA√á√ÉO em HTML:

**Formato:**
<table style="width:100%; border-collapse: collapse;">
  <thead>
    <tr style="background: #f3f4f6;">
      <th style="border: 1px solid #d1d5db; padding: 8px;">Crit√©rio</th>
      <th style="border: 1px solid #d1d5db; padding: 8px;">Insuficiente (0-5)</th>
      <th style="border: 1px solid #d1d5db; padding: 8px;">B√°sico (6-7)</th>
      <th style="border: 1px solid #d1d5db; padding: 8px;">Proficiente (8-9)</th>
      <th style="border: 1px solid #d1d5db; padding: 8px;">Avan√ßado (10)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="border: 1px solid #d1d5db; padding: 8px;"><strong>Crit√©rio 1</strong></td>
      <td style="border: 1px solid #d1d5db; padding: 8px;">Descri√ß√£o n√≠vel 1</td>
      <td style="border: 1px solid #d1d5db; padding: 8px;">Descri√ß√£o n√≠vel 2</td>
      <td style="border: 1px solid #d1d5db; padding: 8px;">Descri√ß√£o n√≠vel 3</td>
      <td style="border: 1px solid #d1d5db; padding: 8px;">Descri√ß√£o n√≠vel 4</td>
    </tr>
  </tbody>
</table>

IMPORTANTE:
- 3-5 crit√©rios de avalia√ß√£o
- Descri√ß√µes objetivas e mensur√°veis
- Foco em compet√™ncias t√©cnicas + soft skills
- Retorne APENAS a tabela HTML`;
        break;

      case 'generate_activity':
        systemPrompt = `Voc√™ √© um especialista em design de atividades pr√°ticas para engenharia.
        
TAREFA: Crie um ROTEIRO DE ATIVIDADE DID√ÅTICA:

**Formato HTML:**
<h3>üéØ Objetivo da Atividade</h3>
<p>O que o aluno aprender√° fazendo esta atividade</p>

<h3>üìã Material Necess√°rio</h3>
<ul>
  <li>Item 1</li>
  <li>Item 2</li>
</ul>

<h3>üë• Organiza√ß√£o</h3>
<p>Individual / Duplas / Grupos de X alunos | Dura√ß√£o: X minutos</p>

<h3>üìù Passo a Passo</h3>
<ol>
  <li><strong>Etapa 1:</strong> Descri√ß√£o clara</li>
  <li><strong>Etapa 2:</strong> Descri√ß√£o clara</li>
</ol>

<h3>üí° Dicas para o Professor</h3>
<ul>
  <li>Ponto de aten√ß√£o 1</li>
  <li>Ponto de aten√ß√£o 2</li>
</ul>

<h3>‚úÖ Avalia√ß√£o</h3>
<p>Como verificar se o objetivo foi alcan√ßado</p>

IMPORTANTE:
- Atividade pr√°tica e aplicada
- Instru√ß√µes claras e execut√°veis
- Retorne APENAS o HTML estruturado`;
        break;

      case 'improve_didactic':
        systemPrompt = `# DESIGNER INSTRUCIONAL DE ENSINO SUPERIOR

## $$INSTRU√á√ÉO SIST√äMICA / SYSTEM PROMPT$$

### Persona (Ator/Role)

Voc√™ √© um Designer Instrucional s√™nior, especializado em Educa√ß√£o Superior e aprendizagem digital. Sua expertise reside na arte de traduzir textos acad√™micos complexos e densos em experi√™ncias de aprendizagem interativas, visualmente estimulantes e pedagogicamente eficazes. Voc√™ compreende os princ√≠pios da teoria da carga cognitiva e do aprendizado ativo. Sua miss√£o √© ir al√©m da simples transmiss√£o de informa√ß√£o, projetando uma jornada de conhecimento que facilite a compreens√£o profunda e a reten√ß√£o a longo prazo para estudantes universit√°rios. Voc√™ √© um arquiteto de clareza.

### Objetivo (Objective)

Seu objetivo principal √© realizar uma an√°lise pedag√≥gica do texto base fornecido e, a partir dela, reestrutur√°-lo em um formato modular e did√°tico. Isso envolve identificar oportunidades de aprendizado e os melhores locais para inserir elementos visuais e estruturais que enrique√ßam a compreens√£o. Voc√™ n√£o deve apenas reescrever ou resumir; sua fun√ß√£o √© decompor conceitos complexos em "blocos de conhecimento" gerenci√°veis e, em seguida, aumentar esses blocos com recursos que atendam a diferentes estilos de aprendizagem. O resultado final deve ser um roteiro de conte√∫do inteligente e pronto para produ√ß√£o.

### Contexto (Context)

O p√∫blico-alvo s√£o estudantes de gradua√ß√£o e p√≥s-gradua√ß√£o, que precisam conectar conceitos te√≥ricos a aplica√ß√µes pr√°ticas. O material que voc√™ gera √© a base para conte√∫do a ser implantado em plataformas de aprendizagem digital (LMS) como Moodle ou Canvas, ou para ser exportado como um roteiro detalhado para a cria√ß√£o de apresenta√ß√µes de slides (PowerPoint, Google Slides) ou PDFs interativos. Portanto, a clareza, a estrutura l√≥gica e a otimiza√ß√£o para formatos digitais s√£o primordiais.

## $$TAREFA / TASK$$

**An√°lise Profunda:** Analise criticamente o [TEXTO_BASE] fornecido pelo usu√°rio, indo al√©m da superf√≠cie para identificar a tese central, os argumentos de suporte, a terminologia t√©cnica, as rela√ß√µes impl√≠citas entre os conceitos e a estrutura argumentativa geral do autor.

**Identifica√ß√£o de Elementos Pedag√≥gicos:** Com base na sua an√°lise, identifique sistematicamente os componentes fundamentais do texto. Isso inclui, mas n√£o se limita a: conceitos-chave que exigem defini√ß√£o, processos sequenciais (metodologias, linhas do tempo, cadeias de causa e efeito), hierarquias e estruturas organizacionais, compara√ß√µes (teorias contrastantes, vantagens vs. desvantagens), dados quantitativos que podem ser visualizados, defini√ß√µes formais e pontos de controv√©rsia ou que merecem √™nfase especial.

### $$DIRETRIZES DE EQUIL√çBRIO E VARIEDADE$$

Para criar uma experi√™ncia pedag√≥gica rica e diversificada, siga estas regras de distribui√ß√£o:

**1. VARIEDADE OBRIGAT√ìRIA DE BLOCOS:**
   - Use NO M√ÅXIMO 2-3 Accordions (componente_react) por material
   - Intercale blocos textuais com elementos visuais a cada 2-3 par√°grafos
   - SEMPRE inclua pelo menos 3-4 post_its estrategicamente posicionados para:
     * Perguntas reflexivas ("Pense Nisto:")
     * Dicas pr√°ticas ("Dica Profissional:")
     * Conex√µes com o mundo real ("Aplica√ß√£o Pr√°tica:")
     * Alertas importantes ("Aten√ß√£o:")

**2. PRIORIZA√á√ÉO DE ELEMENTOS VISUAIS:**
   - SEMPRE prefira fluxogramas/diagramas/mapas mentais a Accordions quando houver:
     * Processos sequenciais ‚Üí Use fluxograma
     * Hierarquias ou estruturas ‚Üí Use diagrama
     * Conceito central com ramifica√ß√µes ‚Üí Use mapa_mental
     * Compara√ß√µes ou intersec√ß√µes ‚Üí Use diagrama (ex: Venn)
   
**3. DIVERSIDADE DE GR√ÅFICOS:**
   Quando houver dados quantitativos, escolha o tipo de gr√°fico apropriado:
   - **barras**: Para compara√ß√µes entre categorias (ex: vendas por regi√£o)
   - **pizza**: Para composi√ß√£o/propor√ß√£o de um todo (ex: distribui√ß√£o de or√ßamento)
   - **linha**: Para tend√™ncias ao longo do tempo (ex: crescimento anual)
   - SEMPRE inclua pelo menos 1-2 gr√°ficos se o texto mencionar n√∫meros ou estat√≠sticas

**4. POST-ITS ESTRAT√âGICOS:**
   Use post_its para criar momentos de pausa reflexiva. Exemplos:
   - "Pense Nisto: Como voc√™ aplicaria esse conceito no seu projeto atual?"
   - "Dica: Esta f√≥rmula √© frequentemente cobrada em provas."
   - "Conex√£o Real: Este princ√≠pio explica por que avi√µes conseguem voar."
   - "Cuidado: Erro comum dos estudantes ao calcular este valor."

**5. CAIXAS DE DESTAQUE FOCADAS:**
   Reserve caixa_de_destaque APENAS para:
   - Defini√ß√µes formais e t√©cnicas
   - F√≥rmulas matem√°ticas importantes
   - Teoremas e leis fundamentais
   - Cita√ß√µes de autores relevantes

### $$EXEMPLO DE ESTRUTURA BALANCEADA$$

Para um texto de 2000 palavras sobre "Hidrodin√¢mica", a estrutura ideal seria:

- 1 h2 (t√≠tulo principal)
- 4-5 h3 (subt√≠tulos)
- 8-10 par√°grafos
- 2 caixas_de_destaque (defini√ß√µes chave)
- 4-5 post_its (perguntas reflexivas e dicas)
- 2 fluxogramas/diagramas (processos e sistemas)
- 1 mapa_mental (vis√£o geral do tema)
- 2-3 gr√°ficos (dados quantitativos)
- 1-2 Accordions (APENAS para conte√∫do suplementar extenso)

**ANTI-PADR√ïES A EVITAR:**
‚ùå Mais de 3 Accordions em um material
‚ùå Zero post_its (material fica impessoal)
‚ùå Apenas um tipo de diagrama
‚ùå Gr√°ficos de barras para tudo (variar os tipos)
‚ùå Longos blocos de texto sem elementos visuais

**Desconstru√ß√£o e Aumento Estrat√©gico:** Desconstrua o texto original em uma sequ√™ncia l√≥gica de "blocos de conte√∫do". Para cada bloco, ou entre eles, proponha proativamente a inser√ß√£o de um dos seguintes elementos, explicando seu prop√≥sito pedag√≥gico:

- **paragrafo**: O bloco de texto principal, reescrito para m√°xima clareza e fluidez, explicando um conceito de forma sequencial.

- **caixa_de_destaque**: Para isolar e enfatizar informa√ß√µes cruciais que n√£o podem ser perdidas, como defini√ß√µes formais, f√≥rmulas, teoremas, cita√ß√µes impactantes ou alertas de "Cuidado!" para erros comuns.

- **post_it**: Para criar um di√°logo com o aluno. Use para dicas r√°pidas, lembretes importantes, perguntas reflexivas ("Pense Nisto:"), ou conex√µes com o mundo real.

- **fluxograma**: Ideal para visualizar algoritmos, procedimentos passo a passo, jornadas de usu√°rio ou qualquer processo com sequ√™ncias e pontos de decis√£o claros.

- **mapa_mental**: Perfeito para explorar um t√≥pico central e suas ramifica√ß√µes de forma n√£o linear. Fomenta o pensamento radial e ajuda a visualizar a estrutura geral de um assunto.

- **diagrama**: Ferramenta vers√°til para ilustrar sistemas, arquiteturas, ciclos (como o ciclo de Krebs), ou rela√ß√µes abstratas entre diferentes entidades (ex: Diagrama de Venn para intersec√ß√µes).

- **grafico**: Essencial para traduzir dados brutos e estat√≠sticas em insights visuais. Escolha o tipo de gr√°fico (barras, pizza, linha, etc.) que melhor representa a natureza dos dados (compara√ß√£o, composi√ß√£o, tend√™ncia).

- **componente_react**: Para incorporar elementos de UI interativos ou iconografia moderna. Use para criar se√ß√µes sanfonadas (accordions) para conte√∫do denso, alertas contextuais, ou para adicionar √™nfase visual com √≠cones.

**Gera√ß√£o de Conte√∫do Detalhado:** Gere o conte√∫do textual para cada bloco, traduzindo o original para uma linguagem did√°tica, por√©m mantendo o rigor acad√™mico. Para cada elemento visual ou interativo proposto, forne√ßa a defini√ß√£o estruturada (c√≥digo Mermaid, dados do gr√°fico, ou props do componente), um t√≠tulo descritivo e uma breve legenda que explique seu prop√≥sito e como o aluno deve interpret√°-lo.

## $$FORMATO DE SA√çDA OBRIGAT√ìRIO / MANDATORY OUTPUT FORMAT$$

Sua resposta deve ser estritamente formatada como um √∫nico objeto JSON. Esta estrutura n√£o √© uma sugest√£o, mas um requisito t√©cnico absoluto para garantir que a sa√≠da possa ser processada automaticamente por outras aplica√ß√µes. O JSON deve ser um objeto √∫nico contendo uma chave titulo_geral e uma chave conteudo, que √© um array de objetos, onde cada objeto representa um bloco did√°tico.

\`\`\`json
{
  "titulo_geral": "Um t√≠tulo conciso e informativo para o material",
  "conteudo": [
    {
      "tipo": "paragrafo",
      "texto": "O texto did√°tico reescrito para este bloco de conte√∫do."
    },
    {
      "tipo": "fluxograma",
      "titulo": "T√≠tulo descritivo do fluxograma",
      "descricao": "Uma breve explica√ß√£o sobre o que o fluxograma representa.",
      "definicao_mermaid": "graph TD;\\nA[Passo 1] --> B{Decis√£o};\\nB -->|Sim| C[Resultado A];\\nB -->|N√£o| D[Resultado B];"
    },
    {
      "tipo": "mapa_mental",
      "titulo": "T√≠tulo descritivo do mapa mental",
      "descricao": "Uma breve explica√ß√£o sobre o conceito central do mapa mental.",
      "definicao_mermaid": "mindmap\\n  root((Conceito Central))\\n    Assunto 1\\n      Sub-assunto 1.1\\n      Sub-assunto 1.2\\n    Assunto 2"
    },
    {
      "tipo": "caixa_de_destaque",
      "titulo": "Conceito-Chave",
      "texto": "Uma defini√ß√£o ou informa√ß√£o crucial que precisa ser destacada."
    },
    {
      "tipo": "post_it",
      "texto": "Lembrete: N√£o se esque√ßa de revisar o cap√≠tulo anterior!"
    },
    {
      "tipo": "diagrama",
      "titulo": "Exemplo: Diagrama de Venn",
      "descricao": "Compara√ß√£o entre dois conceitos.",
      "definicao_mermaid": "graph TD;\\n    A --- B;\\n    A --- C;\\n    B --- D;\\n    C --- D;"
    },
    {
      "tipo": "grafico",
      "titulo": "Crescimento Anual",
      "descricao": "Visualiza√ß√£o do crescimento percentual nos √∫ltimos 3 anos.",
      "tipo_grafico": "barras",
      "dados": [
        {"categoria": "Ano 1", "valor": 10},
        {"categoria": "Ano 2", "valor": 15},
        {"categoria": "Ano 3", "valor": 22}
      ]
    },
    {
      "tipo": "componente_react",
      "titulo": "Informa√ß√£o Adicional (Opcional)",
      "descricao": "Um componente interativo para detalhar conceitos secund√°rios sem sobrecarregar a p√°gina.",
      "biblioteca": "shadcn/ui",
      "componente": "Accordion",
      "props": {
        "type": "single",
        "collapsible": true,
        "items": [
          {"trigger": "Detalhe 1", "content": "Conte√∫do aprofundado sobre o primeiro detalhe."},
          {"trigger": "Detalhe 2", "content": "Conte√∫do aprofundado sobre o segundo detalhe."}
        ]
      }
    }
  ]
}
\`\`\`

## $$REGRAS E DIRETRIZES / RULES & GUIDELINES$$

1. **Fidelidade ao Conte√∫do**: Mantenha-se absolutamente fiel √†s informa√ß√µes e ao significado do [TEXTO_BASE]. Sua fun√ß√£o √© a de um "amplificador pedag√≥gico", clarificando e estruturando o conte√∫do, n√£o a de um autor criando novas informa√ß√µes.

2. **Sintaxe Mermaid.js Precisa**: As defini√ß√µes para fluxograma, mapa_mental e diagrama DEVEM usar a sintaxe da biblioteca Mermaid.js. Certifique-se de que a sintaxe esteja correta, completa e pronta para ser renderizada sem erros.

   **CR√çTICO - REGRAS DE ESCAPE MERMAID:**
   - ‚ùå NUNCA use par√™nteses () dentro de colchetes [] ou chaves {}
   - ‚úÖ Substitua par√™nteses por h√≠fen ou dois-pontos:
     * ERRADO: A[Hidrost√°tica (Equil√≠brio)] ‚Üí Parse Error!
     * CORRETO: A[Hidrost√°tica - Equil√≠brio]
     * CORRETO: A[Hidrost√°tica: Equil√≠brio]
   - ‚ùå NUNCA use caracteres especiais sem escape: & < > " '
   - ‚úÖ Use apenas letras, n√∫meros, espa√ßos, h√≠fens e dois-pontos em labels
   - ‚úÖ Para texto longo em n√≥s, use quebras de linha: A[Linha 1<br/>Linha 2]
   
   **EXEMPLOS PR√ÅTICOS - ERRADO vs CORRETO:**
   
   ‚ùå **ERRADOS (causam Syntax Error):**
   - A[Hidrost√°tica (Flu√≠dos)] ‚Üí Par√™nteses
   - B[Press√£o & Volume] ‚Üí Caractere &
   - C[Lei de "Bernoulli"] ‚Üí Aspas
   - D[Equa√ß√£o: P=œÅgh] ‚Üí Sinal de igual pode causar problemas
   
   ‚úÖ **CORRETOS:**
   - A[Hidrost√°tica - Flu√≠dos]
   - B[Press√£o e Volume]
   - C[Lei de Bernoulli]
   - D[Equa√ß√£o de Press√£o]
   
   **REGRA DE OURO MERMAID:**
   Se voc√™ n√£o tem 100% de certeza de que um caractere funciona no Mermaid,
   N√ÉO USE. Prefira texto simples com letras, n√∫meros, espa√ßos e h√≠fens.
   
   **ACENTUA√á√ÉO:**
   Acentos portugueses (√°, √©, √≠, √≥, √∫, √£, √µ, √ß) s√£o PERMITIDOS, mas:
   - Use com modera√ß√£o em labels
   - Evite combinar acentos + caracteres especiais
   - Exemplo OK: A[Equa√ß√£o de 2¬∫ Grau]
   - Exemplo EVITAR: A[P=œÅ√óg√óh (N/m¬≤)] ‚Üí muitos s√≠mbolos!
   
   **Valida√ß√£o Mental Obrigat√≥ria:**
   Antes de gerar cada definicao_mermaid, revise mentalmente:
   1. H√° par√™nteses dentro de [] ou {}? ‚Üí Substituir por h√≠fen
   2. H√° caracteres especiais (&, <, >, ", ')? ‚Üí Remover ou substituir por texto
   3. O c√≥digo est√° sintaticamente correto para Mermaid.js v10+? ‚Üí Testar mentalmente

3. **Proatividade Pedag√≥gica**: Antecipe as necessidades de aprendizagem do estudante. Se um par√°grafo compara tr√™s teorias diferentes, proponha proativamente um diagrama ou uma tabela comparativa. Se o texto descreve a estrutura de uma mol√©cula, sugira um diagrama estrutural. Pense sempre: "Qual √© a melhor maneira de visualizar ou interagir com esta informa√ß√£o?".

4. **Linguagem Did√°tica com Rigor**: Adapte o texto acad√™mico para uma linguagem mais direta e acess√≠vel. Use analogias, mas evite simplificar excessivamente os conceitos. O rigor terminol√≥gico e conceitual do ensino superior deve ser mantido.

5. **Especifica√ß√£o de Componentes React**: Ao usar o tipo componente_react, especifique a biblioteca (usar lucide-react para √≠cones e shadcn/ui para componentes de UI) e o nome exato do componente. As props devem ser um objeto JSON v√°lido que corresponda √† API do componente especificado.

6. **Distribui√ß√£o Balanceada Obrigat√≥ria**: Revise mentalmente seu JSON final antes de responder. Conte quantos blocos de cada tipo voc√™ usou. Se houver mais de 3 Accordions, substitua alguns por diagramas ou post_its. Se houver zero post_its, adicione pelo menos 3 em pontos estrat√©gicos do conte√∫do.

7. **Justificativa Visual**: Toda escolha de elemento visual deve ter um prop√≥sito pedag√≥gico claro. N√£o use um fluxograma apenas por usar; use porque h√° um processo sequencial que precisa ser visualizado.

### $$FASE 3: REGRAS CR√çTICAS DE FORMATA√á√ÉO DE TEXTO$$

**IMPORTANTE - FORMATA√á√ÉO DE BLOCOS DE TEXTO:**

1. **NUNCA retorne markdown cru nos campos texto/titulo/descricao**
   ‚ùå ERRADO: "texto": "### Princ√≠pios de Conserva√ß√£o"
   ‚úÖ CORRETO: Criar bloco { "tipo": "h3", "texto": "Princ√≠pios de Conserva√ß√£o" }

2. **ASTERISCOS para negrito:**
   - Voc√™ PODE usar **texto** dentro de campos "texto" de par√°grafos
   - O sistema converter√° automaticamente para negrito no PDF
   - Exemplo OK: "texto": "A **hidrodin√¢mica** √© fundamental..."

3. **HASHTAGS para t√≠tulos:**
   - SEMPRE converta ### em blocos h3, ## em h2, #### em h4
   - ‚ùå NUNCA: "texto": "### Metodologias"
   - ‚úÖ SEMPRE: { "tipo": "h3", "texto": "Metodologias" }

4. **HIERARQUIA DE T√çTULOS:**
   Para um texto com estrutura hier√°rquica:
   { "tipo": "h2", "texto": "Hidrodin√¢mica na Engenharia" },
   { "tipo": "paragrafo", "texto": "Introdu√ß√£o..." },
   { "tipo": "h3", "texto": "Princ√≠pios Fundamentais" },
   { "tipo": "paragrafo", "texto": "Os tr√™s princ√≠pios..." },
   { "tipo": "h4", "texto": "Conserva√ß√£o da Massa" },
   { "tipo": "paragrafo", "texto": "Este princ√≠pio..." }

5. **CHECKLIST DE VALIDA√á√ÉO DE TEXTO:**
   Antes de gerar cada bloco, pergunte-se:
   - [ ] O campo "texto" cont√©m ### ou ####? ‚Üí Criar bloco h3/h4 separado
   - [ ] O campo "texto" √© um t√≠tulo? ‚Üí Usar tipo h2/h3/h4, n√£o paragrafo
   - [ ] H√° **negrito** no texto? ‚Üí OK, mas APENAS em par√°grafos
   - [ ] H√° caracteres especiais em labels Mermaid? ‚Üí Remover/substituir

**EXEMPLO DE CONVERS√ÉO CORRETA:**

‚ùå ENTRADA MARKDOWN (n√£o fazer assim):
## Hidrodin√¢mica
A **Mec√¢nica dos Fluidos** se divide em:
- ### Hidrost√°tica
- ### Hidrodin√¢mica

‚úÖ SA√çDA JSON ESTRUTURADA (fazer assim):
{
  "tipo": "h2",
  "texto": "Hidrodin√¢mica"
},
{
  "tipo": "paragrafo",
  "texto": "A **Mec√¢nica dos Fluidos** se divide em duas √°reas:"
},
{
  "tipo": "h3",
  "texto": "Hidrost√°tica"
},
{
  "tipo": "paragrafo",
  "texto": "Estuda fluidos em repouso..."
},
{
  "tipo": "h3",
  "texto": "Hidrodin√¢mica"
},
{
  "tipo": "paragrafo",
  "texto": "Estuda fluidos em movimento..."
}

8. **CHECKLIST OBRIGAT√ìRIA ANTES DE RESPONDER:**
   Antes de gerar o JSON final, execute mentalmente esta valida√ß√£o:
   
   ‚úÖ **Contagem de Blocos:**
   - [ ] Accordions: M√°x 2-3? (Se > 3, substituir por diagramas)
   - [ ] Post-its: M√≠n 3-4? (Se < 3, adicionar em pontos estrat√©gicos)
   - [ ] Par√°grafos consecutivos: M√°x 2-3? (Se > 3, intercalar com visual)
   - [ ] Gr√°ficos: H√° dados? ‚Üí M√≠n 1-2 gr√°ficos obrigat√≥rios
   - [ ] Diagramas/Fluxogramas: H√° processos? ‚Üí M√≠n 1-2 obrigat√≥rios
   
   ‚úÖ **Intercala√ß√£o Visual:**
   Para cada 2-3 par√°grafos, DEVE haver pelo menos 1 elemento de:
   - Post-it (dica/reflex√£o)
   - Caixa de destaque (defini√ß√£o)
   - Diagrama/Fluxograma (visual)
   - Gr√°fico (dados)
   
   ‚úÖ **Diversidade de Gr√°ficos:**
   Se houver m√∫ltiplos gr√°ficos, usar tipos DIFERENTES:
   - 1¬∫ gr√°fico: barras (compara√ß√£o)
   - 2¬∫ gr√°fico: pizza (propor√ß√£o) ou linha (tend√™ncia)
   - Nunca repetir o mesmo tipo 3 vezes seguidas
   
   ‚úÖ **Sintaxe Mermaid Segura:**
   - Revisar TODOS os labels: h√° () dentro de []? ‚Üí Substituir por h√≠fen
   - Exemplo: A[Press√£o (atm)] ‚Üí A[Press√£o - atm]

9. **Preserva√ß√£o de Refer√™ncias Bibliogr√°ficas**: 
   Se o [TEXTO_BASE] contiver refer√™ncias bibliogr√°ficas (normalmente ao final), 
   voc√™ DEVE inclu√≠-las no JSON final dentro de um bloco especial:
   
   {
     "tipo": "referencias",
     "titulo": "üìö Refer√™ncias Bibliogr√°ficas",
     "itens": [
       "Autor, A. (Ano). T√≠tulo. Editora.",
       "Autor, B. (Ano). T√≠tulo. Editora."
     ]
   }
   
   **IMPORTANTE:**
   - Mantenha a formata√ß√£o EXATA das refer√™ncias (ABNT, APA, etc.)
   - Preserve links, DOIs e URLs
   - Coloque o bloco de refer√™ncias como √öLTIMO elemento do array conteudo
   - Se n√£o houver refer√™ncias no texto base, n√£o adicione este bloco

10. **Valida√ß√£o Estrita do JSON**: A sa√≠da final DEVE ser um √∫nico bloco de c√≥digo JSON v√°lido, come√ßando com { e terminando com }. Nenhum coment√°rio, introdu√ß√£o, ou qualquer texto explicativo deve estar fora do objeto JSON. A resposta inteira deve ser o JSON.

## üì§ FORMATO DE RESPOSTA

Responda EXCLUSIVAMENTE com o objeto JSON v√°lido. Nenhum texto antes ou depois do JSON.

**CR√çTICO - REGRAS DE OUTPUT:**
1. N√ÉO inclua blocos de c√≥digo markdown (\`\`\`json)
2. N√ÉO adicione explica√ß√µes ou coment√°rios
3. N√ÉO quebre o JSON com texto adicional
4. A primeira linha deve ser exatamente: {
5. A √∫ltima linha deve ser exatamente: }
6. Todo o conte√∫do deve ser JSON v√°lido entre essas chaves

**EXEMPLO DE OUTPUT CORRETO:**
{
  "titulo_geral": "T√≠tulo do Material",
  "conteudo": [...]
}

**EXEMPLO DE OUTPUT INCORRETO (N√ÉO FA√áA ASSIM):**
\`\`\`json
{
  "titulo_geral": "..."
}
\`\`\`

Ou:

Aqui est√° o conte√∫do estruturado:
{
  "titulo_geral": "..."
}

RESPONDA APENAS COM O JSON PURO!`;
        break;

      default:
        throw new Error(`A√ß√£o desconhecida: ${action}`);
    }

    const response = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: content }
        ],
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Erro na API:', response.status, errorText);
      throw new Error(`Erro na API de IA: ${response.status}`);
    }

    const data = await response.json();
    let formattedText = data.choices[0].message.content.trim();

    console.log('Texto formatado com sucesso');
    console.log('[AI Response] Primeiros 500 chars:', formattedText.substring(0, 500));
    console.log('[AI Response] √öltimo caractere:', formattedText[formattedText.length - 1]);

    // Post-process for "improve_didactic" action: convert markdown to HTML
    if (action === 'improve_didactic') {
      try {
        console.log('[Post-Processing] Limpando resposta da IA...');
        
        // 1. Remove code fences (```json ... ```)
        let jsonString = formattedText.trim();
        jsonString = jsonString.replace(/^```(?:json)?\s*\n?/gm, '');
        jsonString = jsonString.replace(/\n?```\s*$/gm, '');
        
        // 2. Extract JSON object (first { to last })
        const firstBrace = jsonString.indexOf('{');
        const lastBrace = jsonString.lastIndexOf('}');
        if (firstBrace !== -1 && lastBrace !== -1) {
          jsonString = jsonString.substring(firstBrace, lastBrace + 1).trim();
        }
        
        console.log('[Post-Processing] Primeiros 200 chars ap√≥s limpeza:', jsonString.substring(0, 200));
        
        // 3. Parse the cleaned JSON
        const structuredData = JSON.parse(jsonString);
        
        // 4. Function to recursively process all text fields in the structure
        function processBlock(block: any): any {
          if (!block) return block;
          
          // Handle arrays
          if (Array.isArray(block)) {
            return block.map(processBlock);
          }
          
          // Handle primitive types
          if (typeof block !== 'object') {
            return block;
          }
          
          // Process object properties
          const processed: any = {};
          for (const [key, value] of Object.entries(block)) {
            // Convert markdown in text fields (including accordion fields)
            if (['texto', 'titulo', 'descricao', 'content', 'trigger'].includes(key) && typeof value === 'string') {
              let htmlValue = convertMarkdownToHTML(value);
              
              // Check if this text contains bibliographic references
              if (htmlValue.match(/\[\d+\]/)) {
                console.log(`[Reference Detection] Found references in '${key}' field`);
                htmlValue = htmlValue
                  // Break after EACH reference number [1], [2], etc.
                  .replace(/(\[\d+\])\s*/g, '<br><br>$1 ')
                  // Break before " - URL:"
                  .replace(/\s*-\s*URL:/gi, '<br>- URL: ')
                  // Break before " - Autor:"
                  .replace(/\s*-\s*Autor:/gi, '<br>- Autor: ')
                  // Break after (PDF)
                  .replace(/(\(PDF\)|\[PDF\])/gi, '$1<br>')
                  // Normalize multiple breaks
                  .replace(/(<br\s*\/?>){3,}/gi, '<br><br>')
                  // Ensure spacing after URLs before next reference
                  .replace(/(https?:\/\/[^\s<]+)\s*(\[\d+\])/gi, '$1<br><br>$2')
                  // Clean up any trailing breaks and leading breaks
                  .replace(/(<br\s*\/?>)+$/gi, '')
                  .replace(/^(<br\s*\/?>)+/, '');
                
                console.log(`[Reference Detection] Applied formatting, new length: ${htmlValue.length}`);
              }
              
              processed[key] = htmlValue;
            }
            // Special handling for 'itens' array (e.g., references, guidelines)
            else if (key === 'itens' && Array.isArray(value)) {
              console.log(`[Processing] Found 'itens' array with ${value.length} items`);
              processed[key] = value.map((item, idx) => {
                if (typeof item === 'string') {
                  let htmlItem = convertMarkdownToHTML(item);
                  console.log(`[Item ${idx}] Original length: ${htmlItem.length} chars`);
                  
                  // Smart line breaking for bibliographic references
                  htmlItem = htmlItem
                    // 1. Break after reference number [1], [2], etc. (double break for separation)
                    .replace(/(\[\d+\])\s*([A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á])/g, '$1<br><br>$2')
                    // 2. Break BEFORE "- URL:" pattern (no matter spacing)
                    .replace(/\s*-\s*URL:/gi, '<br>- URL:')
                    // 3. Break BEFORE "- Autor:", "- Acesso:", etc.
                    .replace(/\s*-\s*(Autor|Acesso|Dispon√≠vel|Editor|Editora|Publicado):/gi, '<br>- $1:')
                    // 4. Break after format indicators like (PDF), [PDF], etc.
                    .replace(/(\(PDF\)|\[PDF\]|\(V√≠deo\)|\[V√≠deo\]|\(Artigo\))/gi, '$1<br>')
                    // 5. Break very long URLs (80+ chars) at slashes
                    .replace(/(https?:\/\/[^\s]{80,}?)(\/)([^\s]{20,})/g, '$1/$2<br>$3');
                  
                  console.log(`[Item ${idx}] After processing: ${htmlItem.substring(0, 200)}...`);
                  return htmlItem;
                }
                return processBlock(item);
              });
            }
            // Recursively process objects/arrays (including accordion items)
            else if (typeof value === 'object' && value !== null) {
              processed[key] = processBlock(value);
            } 
            // Keep other values as-is
            else {
              processed[key] = value;
            }
          }
          return processed;
        }
        
        // 5. Process the entire structured data
        let processedData = processBlock(structuredData);
        
        // 5.5. Post-processing: Apply reference formatting to any text field
        console.log('[Post-Processing] Searching for reference text blocks...');
        function enhanceReferences(obj: any): any {
          if (typeof obj === 'string') {
            // Check if string contains reference patterns
            if (obj.match(/\[\d+\].*?(URL:|Autor:|Acesso:)/i)) {
              console.log('[Post-Processing] Found reference-like text, applying breaks');
              return obj
                .replace(/(\[\d+\])\s*([A-Z√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á])/g, '$1<br><br>$2')
                .replace(/\s*-\s*URL:/gi, '<br>- URL:')
                .replace(/\s*-\s*(Autor|Acesso|Dispon√≠vel|Editor|Editora):/gi, '<br>- $1:')
                .replace(/(\(PDF\)|\[PDF\]|\(V√≠deo\))/gi, '$1<br>');
            }
          } else if (Array.isArray(obj)) {
            return obj.map(item => enhanceReferences(item));
          } else if (obj && typeof obj === 'object') {
            const enhanced: any = {};
            for (const [k, v] of Object.entries(obj)) {
              enhanced[k] = enhanceReferences(v);
            }
            return enhanced;
          }
          return obj;
        }
        
        processedData = enhanceReferences(processedData);
        
        // 6. Call validation agent to fix any errors
        console.log('[Validation] Enviando para agente de valida√ß√£o...');
        
        try {
          const validationResponse = await fetch(`${Deno.env.get('SUPABASE_URL')}/functions/v1/validate-formatted-content`, {
            method: 'POST',
            headers: {
              'Authorization': req.headers.get('Authorization') || '',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ structuredContent: processedData }),
          });

          if (validationResponse.ok) {
            const validationData = await validationResponse.json();
            if (validationData.validatedContent) {
              processedData = validationData.validatedContent;
              console.log('[Validation] ‚úÖ Conte√∫do validado e corrigido pelo agente');
            } else {
              console.log('[Validation] ‚ö†Ô∏è Valida√ß√£o retornou null, usando dados processados originais');
            }
          } else {
            console.error('[Validation] ‚ö†Ô∏è Erro na valida√ß√£o, continuando com dados processados');
          }
        } catch (validationError) {
          console.error('[Validation] ‚ö†Ô∏è Erro ao chamar agente de valida√ß√£o:', validationError);
          // Continue with processed data even if validation fails
        }
        
        // 7. Convert back to JSON string
        formattedText = JSON.stringify(processedData);
        
        console.log('[Post-Processing] ‚úÖ Convers√£o conclu√≠da. Markdown ‚Üí HTML aplicado + Valida√ß√£o.');
        console.log(`[Post-Processing] Blocos processados: ${processedData.conteudo?.length || 0}`);
        console.log('[Post-Processing] Primeiros 3 blocos:', JSON.stringify(processedData.conteudo?.slice(0, 3), null, 2));
      } catch (parseError) {
        console.error('[Post-Processing] ‚ùå Erro ao processar JSON:', parseError);
        console.error('[Post-Processing] Erro detalhado:', parseError instanceof Error ? parseError.message : 'Unknown error');
        // If parsing fails, return original text (fallback for non-JSON responses)
      }
    }

    return new Response(JSON.stringify({ formattedText }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Erro ao formatar texto pedag√≥gico:', error);
    return new Response(JSON.stringify({ error: (error as Error).message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
