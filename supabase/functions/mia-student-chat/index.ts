import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, fileData, fileType, fileName, isDeepSearch, conversationId, action, context } = await req.json();
    console.log('Received request:', { message, fileType, fileName, isDeepSearch, conversationId, action });

    // Get authenticated user
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('No authorization header');
    }

    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? ''
    );

    const { data: { user }, error: userError } = await supabase.auth.getUser(
      authHeader.replace('Bearer ', '')
    );

    if (userError || !user) {
      throw new Error('Unauthorized');
    }

    // Always fetch student performance data for context
    console.log('Fetching performance data for user:', user.id);
    
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Handle Interactive Actions (GENERATE_SUGGESTIONS, GENERATE_QUIZ, GENERATE_FLASHCARDS)
    if (action && ['GENERATE_SUGGESTIONS', 'GENERATE_QUIZ', 'GENERATE_FLASHCARDS'].includes(action)) {
      console.log(`üéØ Interactive action requested: ${action}`);
      
      // ‚úÖ Buscar √∫ltima mensagem do usu√°rio para topic
      const { data: lastUserMessage } = await supabaseAdmin
        .from('messages')
        .select('content')
        .eq('conversation_id', conversationId)
        .eq('role', 'user')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();
      
      const userTopic = lastUserMessage?.content?.substring(0, 100) || 'T√≥pico de Engenharia';
      console.log('üìù Extracted topic from user:', userTopic);
      
      // ‚úÖ Buscar pen√∫ltima mensagem da assistente (ignorar confirma√ß√µes)
      const { data: assistantMessages } = await supabaseAdmin
        .from('messages')
        .select('content')
        .eq('conversation_id', conversationId)
        .eq('role', 'assistant')
        .order('created_at', { ascending: false })
        .limit(5);
      
      // Filtrar mensagens de confirma√ß√£o de quiz/flashcard
      const educationalContent = assistantMessages?.find(msg => 
        !msg.content.includes('Quiz criado com sucesso') &&
        !msg.content.includes('Flashcards criados com sucesso') &&
        msg.content.length > 200
      );
      
      const contextContent = educationalContent?.content || 'Conte√∫do educacional n√£o encontrado';
      console.log('üìö Context length:', contextContent.length);
      console.log('üìÑ Context preview:', contextContent.substring(0, 150));
      
      // Create main job
      const { data: newJob, error: jobError } = await supabaseAdmin
        .from('jobs')
        .insert({
          user_id: user.id,
          job_type: action,
          status: 'PENDING',
          conversation_id: conversationId,
          input_payload: { 
            context: contextContent,
            topic: userTopic,
            conversationId: conversationId
          }
        })
        .select()
        .single();
      
      if (jobError) throw new Error(`Failed to create job: ${jobError.message}`);
      
      // Fire-and-forget: create insight job
      (async () => {
        try {
          await supabaseAdmin
            .from('jobs')
            .insert({
              user_id: user.id,
              job_type: 'LOG_ACADEMIC_INSIGHT',
              status: 'PENDING',
              conversation_id: conversationId,
              input_payload: {
                action: action.toLowerCase(),
                topic: context?.topic || 'T√≥pico n√£o especificado',
                timestamp: new Date().toISOString()
              }
            });
          console.log('‚úÖ Insight job created');
        } catch (err) {
          console.error('‚ö†Ô∏è Failed to create insight job:', err);
        }
      })();
      
      // Invoke job-runner
      supabaseAdmin.functions.invoke('job-runner', {
        body: { jobId: newJob.id }
      }).catch(err => console.error('Error invoking job-runner:', err));
      
      return new Response(
        JSON.stringify({
          response: 'Processando sua solicita√ß√£o...',
          jobId: newJob.id,
          jobType: action,
          success: true
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Handle Deep Search - create job and return immediately
    if (isDeepSearch) {
      console.log('üîç Deep search requested, creating job...');
      
      const { data: newJob, error: jobError } = await supabaseAdmin
        .from('jobs')
        .insert({
          user_id: user.id,
          job_type: 'DEEP_SEARCH',
          status: 'PENDING',
          conversation_id: conversationId,
          input_payload: { query: message, conversationId: conversationId }
        })
        .select()
        .single();
      
      if (jobError) {
        throw new Error(`Failed to create job: ${jobError.message}`);
      }
      
      console.log(`‚úÖ Job created: ${newJob.id}`);
      
      // Invoke job-runner (fire and forget)
      supabaseAdmin.functions.invoke('job-runner', {
        body: { jobId: newJob.id }
      }).then(() => {
        console.log(`üöÄ Job runner invoked for ${newJob.id}`);
      }).catch(err => {
        console.error('Error invoking job-runner:', err);
      });
      
      return new Response(
        JSON.stringify({
          response: 'Sua pesquisa profunda foi iniciada! Acompanhe o progresso na interface.',
          jobId: newJob.id,
          success: true
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Fetch last 5 quiz attempts
    const { data: quizAttempts, error: quizError } = await supabaseAdmin
      .from('quiz_attempts')
      .select('topic, percentage, created_at')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(5);

    // Fetch last 5 flashcard reviews
    const { data: flashcardReviews, error: flashcardError } = await supabaseAdmin
      .from('flashcard_reviews')
      .select('topic, percentage, created_at')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(5);

    // Build performance context
    let performanceContext = '\n\n**CONTEXTO DE DESEMPENHO DO ALUNO:**\n';
    
    if (quizAttempts && quizAttempts.length > 0) {
      performanceContext += '\n√öltimos Quizzes:\n';
      quizAttempts.forEach((attempt, index) => {
        const date = new Date(attempt.created_at).toLocaleDateString('pt-BR');
        performanceContext += `  ${index + 1}. ${attempt.topic}: ${attempt.percentage}% (${date})\n`;
      });
    }

    if (flashcardReviews && flashcardReviews.length > 0) {
      performanceContext += '\n√öltimas Revis√µes de Flashcards:\n';
      flashcardReviews.forEach((review, index) => {
        const date = new Date(review.created_at).toLocaleDateString('pt-BR');
        performanceContext += `  ${index + 1}. ${review.topic}: ${review.percentage}% de acertos (${date})\n`;
      });
    }

    if ((!quizAttempts || quizAttempts.length === 0) && (!flashcardReviews || flashcardReviews.length === 0)) {
      performanceContext += '\nO aluno ainda n√£o possui hist√≥rico de quizzes ou flashcards. Este √© um bom momento para encoraj√°-lo a testar seus conhecimentos!\n';
    } else {
      performanceContext += '\n**INSTRU√á√ïES:** Use este contexto para personalizar suas respostas:\n';
      performanceContext += '- Se o aluno perguntar sobre um t√≥pico onde teve dificuldades (nota < 70%), seja mais detalhada e paciente.\n';
      performanceContext += '- Se ele teve bom desempenho (nota > 85%), pode sugerir t√≥picos mais avan√ßados.\n';
      performanceContext += '- Se perceber padr√µes de dificuldade, sugira revis√£o focada nesses t√≥picos.\n';
    }

    performanceContext += '\n**PRIORIDADE DE FONTES (quando citar refer√™ncias t√©cnicas):**\n';
    performanceContext += '- **Prim√°rias:** Bases de dados de engenharia (Compendex, Scopus), manuais t√©cnicos (Knovel), organiza√ß√µes de normas (ASTM, IEEE, ABNT)\n';
    performanceContext += '- **Secund√°rias:** Bibliotecas espec√≠ficas de disciplinas (ASCE, ASME), Google Scholar\n';
    performanceContext += '- **Exclus√£o:** Evite citar blogs gen√©ricos ou artigos de not√≠cias n√£o t√©cnicas\n';

    // Build the content array for Gemini
    const contentParts: any[] = [
      {
        type: "text",
        text: message
      }
    ];

    // Add file data if present
    if (fileData && fileType) {
      if (fileType.startsWith('image/')) {
        contentParts.push({
          type: "image_url",
          image_url: {
            url: fileData // base64 data URL
          }
        });
      } else if (fileType === 'application/pdf') {
        // For PDFs, we'd need to extract text first
        // This is a simplified version
        contentParts.push({
          type: "text",
          text: `\n[PDF anexado: ${fileName}]\nNOTA: An√°lise de PDF completa estar√° dispon√≠vel em breve.`
        });
      } else if (fileType.startsWith('audio/')) {
        // For audio, we'd need to transcribe first
        contentParts.push({
          type: "text",
          text: `\n[√Åudio anexado: ${fileName}]\nNOTA: Transcri√ß√£o de √°udio estar√° dispon√≠vel em breve.`
        });
      }
    }

    // Master prompt for normal chat (deep search handled above)
    let systemPrompt = '';
    systemPrompt = `IDIOMA OBRIGAT√ìRIO: Todas as respostas, sugest√µes e materiais gerados devem estar em PORTUGU√äS BRASILEIRO (pt-BR).

Voc√™ √© 'Mia', uma assistente de IA especialista em engenharia. Voc√™ atende tanto estudantes universit√°rios brasileiros quanto professores de engenharia na plataforma Next Class.

**QUANDO ATENDER ESTUDANTES:**
A sua fun√ß√£o √© ser uma tutora pessoal, proativa e personalizada.

**PERSONA PARA ESTUDANTES:**
- Voc√™ √© amig√°vel, paciente e encorajadora
- Voc√™ fala em portugu√™s do Brasil de forma natural e clara
- Voc√™ usa exemplos pr√°ticos e aplic√°veis ao contexto brasileiro
- Voc√™ se refere a normas t√©cnicas brasileiras (ABNT) quando relevante
- Voc√™ conhece o hist√≥rico de desempenho do aluno e usa isso para personalizar suas respostas

**CAPACIDADES PARA ESTUDANTES:**
- Explicar conceitos complexos de engenharia de forma simples
- Analisar diagramas, esquemas e documentos t√©cnicos
- Responder d√∫vidas sobre c√°lculos estruturais, circuitos el√©tricos, mec√¢nica, termodin√¢mica, etc.
- Fornecer feedback construtivo e sugest√µes de estudo personalizadas baseadas no desempenho real
- Ajudar na prepara√ß√£o para provas e trabalhos
- Identificar padr√µes de dificuldade e sugerir revis√µes focadas

**QUANDO ATENDER PROFESSORES:**
A sua fun√ß√£o √© ser uma assistente de design instrucional e cria√ß√£o de conte√∫do educacional.

**PERSONA PARA PROFESSORES:**
- Voc√™ √© profissional e pedagogicamente fundamentada
- Voc√™ conhece metodologias ativas de aprendizagem, especialmente PBL (Problem-Based Learning)
- Voc√™ tem expertise em design curricular para engenharia
- Voc√™ fornece sugest√µes pr√°ticas e diretamente aplic√°veis em sala de aula
- Voc√™ sempre responde em portugu√™s brasileiro

**CAPACIDADES PARA PROFESSORES:**
- Criar planos de aula detalhados seguindo o framework PBL
- Gerar atividades avaliativas com perguntas de ordem superior (Taxonomia de Bloom)
- Sugerir estrat√©gias pedag√≥gicas para t√≥picos espec√≠ficos de engenharia
- Criar materiais de apoio: estudos de caso, notas t√©cnicas, recursos bibliogr√°ficos
- Desenvolver quizzes e flashcards alinhados com objetivos de aprendizagem
- Realizar pesquisas profundas em fontes acad√™micas confi√°veis

**ESTRUTURA DE RESPOSTA OBRIGAT√ìRIA:**

1. **Formata√ß√£o Markdown:**
   - Use ## para t√≠tulos principais de se√ß√µes (ex: "## Conceito Fundamental", "## Aplica√ß√£o Pr√°tica")
   - Use ### para subt√≠tulos quando necess√°rio
   - Use listas numeradas (1., 2., 3.) ou com marcadores (-, *) para organizar informa√ß√µes
   - Use **negrito** para destacar conceitos-chave e termos t√©cnicos importantes
   - Use \`c√≥digo inline\` para f√≥rmulas matem√°ticas, vari√°veis ou termos t√©cnicos espec√≠ficos
   - Use blocos de c√≥digo com \`\`\` para f√≥rmulas complexas ou c√≥digo
   - Mantenha par√°grafos curtos e bem espa√ßados para facilitar a leitura

2. **Sistema de Refer√™ncias (quando aplic√°vel):**
   - Se voc√™ citar informa√ß√µes espec√≠ficas como: teoremas, normas t√©cnicas, dados num√©ricos precisos, defini√ß√µes formais ou conceitos de fontes espec√≠ficas, adicione uma cita√ß√£o numerada: [1], [2], [3]
   - Ao final da sua resposta, se houver cita√ß√µes, crie uma se√ß√£o:
     ## Refer√™ncias
     [1] T√≠tulo do livro/norma - Autor, Ano (ex: "Resist√™ncia dos Materiais - Beer & Johnston, 2015")
     [2] Nome da norma t√©cnica (ex: "NBR 6118:2014 - Projeto de estruturas de concreto")
   - Se a resposta for baseada em conhecimento geral de engenharia, **n√£o √© necess√°rio** adicionar refer√™ncias
   - Use bom senso: respostas conceituais b√°sicas n√£o precisam de refer√™ncias, mas dados t√©cnicos espec√≠ficos sim

3. **Organiza√ß√£o do Conte√∫do:**
   - Respostas curtas (< 300 caracteres): Use pelo menos **negrito** para destacar pontos-chave
   - Respostas m√©dias (300-800 caracteres): Use ## para t√≠tulo principal + listas ou subt√≠tulos
   - Respostas longas (> 800 caracteres): Use ## para se√ß√µes, ### para subt√≥picos, e uma se√ß√£o final de conclus√£o ou pr√≥ximos passos

**DIRETRIZES DE PERSONALIZA√á√ÉO:**
- Use o contexto de desempenho abaixo para personalizar TODAS as suas respostas (quando atender estudantes)
- Se o aluno perguntar sobre um t√≥pico onde teve dificuldades, seja mais detalhada e did√°tica
- Se ele teve bom desempenho, reconhe√ßa isso e desafie-o com conceitos mais avan√ßados
- Quando relevante, mencione de forma sutil que voc√™ notou o desempenho dele (ex: "Percebi que esse tema foi desafiador no √∫ltimo quiz...")
- Quando analisar imagens t√©cnicas, seja detalhado e preciso
- Sempre sugira pr√≥ximos passos ou t√≥picos relacionados para aprofundamento
- Se n√£o tiver certeza sobre algo, seja honesto e sugira recursos adicionais
- Para professores, quando solicitado a criar materiais (planos de aula, quizzes, flashcards), inicie um JOB do tipo apropriado

**TOM E CLAREZA:**
- Mantenha um tom did√°tico, acess√≠vel e encorajador (para estudantes) ou profissional e pedag√≥gico (para professores)
- Seja direta e objetiva, mas sem perder a empatia
- Evite jarg√µes desnecess√°rios, mas use termos t√©cnicos corretos quando apropriado
- Use analogias e exemplos pr√°ticos do cotidiano brasileiro

**PRIORIDADE DE FONTES (quando citar refer√™ncias t√©cnicas):**
- **Prim√°rias (OBRIGAT√ìRIAS):** 
  * Bases de dados de engenharia: Compendex (Engineering Village), Scopus, IEEE Xplore
  * Manuais t√©cnicos: Knovel Engineering Library, CRC Handbooks
  * Organiza√ß√µes de normas: ASTM International, IEEE Standards, ABNT (Associa√ß√£o Brasileira de Normas T√©cnicas)
- **Secund√°rias (RECOMENDADAS):**
  * Bibliotecas espec√≠ficas de disciplinas: ASCE Library, ASME Digital Collection
  * Google Scholar (apenas artigos peer-reviewed)
  * Springer Engineering, Wiley Online Library
- **EXCLUS√ÉO (N√ÉO CITAR):**
  * Blogs gen√©ricos, artigos de not√≠cias n√£o t√©cnicas, Wikipedia, sites .com sem credencial acad√™mica

${performanceContext}`;
    
    // Call Lovable AI Gateway with Gemini
    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY not configured');
    }

    console.log('Calling Lovable AI Gateway...');
    
    // Build the request body for normal chat
    const requestBody: any = {
      model: 'google/gemini-2.5-flash',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: contentParts
        }
      ],
      temperature: 0.7,
      max_tokens: 2000,
    };

    const aiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('AI Gateway error:', aiResponse.status, errorText);
      
      if (aiResponse.status === 429) {
        throw new Error('Limite de requisi√ß√µes atingido. Tente novamente em alguns instantes.');
      }
      if (aiResponse.status === 402) {
        throw new Error('Cr√©ditos insuficientes. Entre em contato com o suporte.');
      }
      
      throw new Error(`Erro na API de IA: ${errorText}`);
    }

    const aiData = await aiResponse.json();
    console.log('AI response received');

    const assistantMessage = aiData.choices?.[0]?.message?.content;
    if (!assistantMessage) {
      throw new Error('Resposta inv√°lida da IA');
    }

    // Handle conversation history
    let activeConversationId = conversationId;
    let conversationTitle = '';
    
    if (!conversationId) {
      // Create new conversation
      const { data: newConversation, error: convError } = await supabaseAdmin
        .from('conversations')
        .insert({
          user_id: user.id,
          title: 'Nova Conversa'
        })
        .select()
        .single();
      
      if (convError) {
        console.error('Error creating conversation:', convError);
      } else {
        activeConversationId = newConversation.id;
      }
    }

    // Save messages to database
    if (activeConversationId) {
      try {
        // Check message count BEFORE inserting new messages
        const { count: messageCountBefore, error: countError } = await supabaseAdmin
          .from('messages')
          .select('*', { count: 'exact', head: true })
          .eq('conversation_id', activeConversationId);

        console.log('Message count before insert:', messageCountBefore);
        const isFirstExchange = !countError && (messageCountBefore === null || messageCountBefore === 0);

        // Save user message
        await supabaseAdmin
          .from('messages')
          .insert({
            conversation_id: activeConversationId,
            role: 'user',
            content: message
          });

        // Save assistant message
        await supabaseAdmin
          .from('messages')
          .insert({
            conversation_id: activeConversationId,
            role: 'assistant',
            content: assistantMessage
          });

        // Generate title only for the first exchange
        if (isFirstExchange) {
          console.log('First exchange detected, generating conversation title...');
          
          try {
            // Generate title for the conversation using Gemini
            const titlePrompt = `Com base na seguinte conversa sobre engenharia, gere um t√≠tulo curto e descritivo com no m√°ximo 5 palavras em portugu√™s brasileiro. O t√≠tulo deve capturar o t√≥pico principal discutido. N√ÉO use t√≠tulos gen√©ricos como "Nova Conversa".

Pergunta do estudante: ${message}
Resposta: ${assistantMessage.substring(0, 300)}...`;

            console.log('Calling AI for title generation...');
            
            const titleResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${LOVABLE_API_KEY}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                model: 'google/gemini-2.5-flash',
                messages: [
                  {
                    role: 'system',
                    content: 'Voc√™ √© um assistente especializado em criar t√≠tulos descritivos para conversas sobre engenharia. Gere t√≠tulos curtos (m√°ximo 5 palavras) que capturem o tema principal. Responda APENAS com o t√≠tulo, sem aspas, pontua√ß√£o adicional ou explica√ß√µes. Use portugu√™s brasileiro.'
                  },
                  {
                    role: 'user',
                    content: titlePrompt
                  }
                ],
                max_tokens: 50,
              }),
            });

            console.log('Title generation response status:', titleResponse.status);

            if (titleResponse.ok) {
              const titleData = await titleResponse.json();
              const generatedTitle = titleData.choices?.[0]?.message?.content?.trim();
              
              console.log('Raw generated title:', generatedTitle);
              
              if (generatedTitle && generatedTitle.toLowerCase() !== 'nova conversa') {
                conversationTitle = generatedTitle;
                
                // Update conversation title
                const { error: updateError } = await supabaseAdmin
                  .from('conversations')
                  .update({ title: conversationTitle })
                  .eq('id', activeConversationId);
                
                if (updateError) {
                  console.error('Error updating conversation title:', updateError);
                } else {
                  console.log('Successfully updated conversation title to:', conversationTitle);
                }
              } else {
                console.log('Title generation returned generic or empty title, keeping default');
                conversationTitle = 'Nova Conversa';
              }
            } else {
              const errorText = await titleResponse.text();
              console.error('Title generation failed:', titleResponse.status, errorText);
              conversationTitle = 'Nova Conversa';
            }
          } catch (titleError) {
            console.error('Error generating conversation title:', titleError);
            conversationTitle = 'Nova Conversa';
          }
        }
      } catch (error) {
        console.error('Error saving messages:', error);
      }
    }

    // üî• CRIAR JOB DE SUGEST√ïES AUTOMATICAMENTE
    let suggestionsJobId: string | null = null;

    try {
      const { data: suggestionsJob, error: suggestionError } = await supabaseAdmin
        .from('jobs')
        .insert({
          user_id: user.id,
          job_type: 'GENERATE_SUGGESTIONS',
          status: 'PENDING',
          conversation_id: activeConversationId,
          input_payload: { 
            context: assistantMessage,
            topic: message.substring(0, 100),
            conversationId: activeConversationId
          }
        })
        .select()
        .single();

      if (!suggestionError && suggestionsJob) {
        suggestionsJobId = suggestionsJob.id;
        
        // Invocar job-runner (fire-and-forget)
        supabaseAdmin.functions.invoke('job-runner', {
          body: { jobId: suggestionsJob.id }
        }).catch(err => console.error('Error invoking job-runner for suggestions:', err));
        
        console.log(`‚ú® Suggestions job created: ${suggestionsJob.id}`);
      }
    } catch (error) {
      console.error('Failed to create suggestions job:', error);
      // N√£o bloquear a resposta principal se falhar
    }

    return new Response(
      JSON.stringify({ 
        response: assistantMessage,
        conversationId: activeConversationId,
        conversationTitle: conversationTitle,
        suggestionsJobId: suggestionsJobId, // ‚úÖ NOVO CAMPO
        success: true 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Error in mia-student-chat:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        success: false 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
