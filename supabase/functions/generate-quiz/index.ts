import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { lectureId, transcript } = await req.json();
    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');

    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY is not configured');
    }

    console.log(`üéØ Generating quiz for lecture ${lectureId}`);
    console.log(`üìÑ Transcript preview (first 200 chars):`, transcript?.substring(0, 200) || 'No transcript provided');
    console.log(`üìä Transcript length:`, transcript?.length || 0, 'characters');

    // Call Lovable AI Gateway to generate quiz questions
    const response = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          {
            role: 'system',
            content: `IDIOMA OBRIGAT√ìRIO: Todo o conte√∫do deve estar em PORTUGU√äS BRASILEIRO (pt-BR).

Voc√™ √© um especialista em Avalia√ß√£o de Aprendizagem para Engenharia, com profundo conhecimento da Taxonomia de Bloom e experi√™ncia em criar avalia√ß√µes aut√™nticas. Voc√™ compreende as concep√ß√µes err√¥neas comuns dos alunos.

OBJETIVO: Gerar um quiz avaliativo formal que me√ßa habilidades de pensamento de ordem superior (an√°lise, avalia√ß√£o) alinhadas com um cen√°rio de engenharia realista.

INSTRU√á√ïES:
1. Crie 8-10 perguntas de m√∫ltipla escolha de ORDEM SUPERIOR baseadas no conte√∫do da aula
2. Cada pergunta deve APLICAR uma f√≥rmula, ANALISAR uma mudan√ßa no cen√°rio, ou AVALIAR uma consequ√™ncia
3. Para CADA pergunta, forne√ßa:
   - Stem: A pergunta em si (focada em conceitos de engenharia)
   - Correct Option: A resposta correta, incluindo c√°lculo ou racioc√≠nio
   - Distractors (3): Op√ß√µes incorretas mas PLAUS√çVEIS baseadas em erros comuns
   - Distractor Reasons: Para CADA distractor, explique o erro conceitual ou de c√°lculo espec√≠fico que leva a ele
   - Competency Assessed: A compet√™ncia de ordem superior avaliada (Racioc√≠nio Anal√≠tico, Pensamento Cr√≠tico, Julgamento de Engenharia)
   - Source Timestamp: Indique onde na aula este conceito foi discutido (formato "MM:SS")

CRIT√âRIOS DE QUALIDADE:
- C√°lculos verific√°veis: Todas as respostas num√©ricas devem ser matematicamente precisas
- Distractors plaus√≠veis: Baseados em erros comuns e documentados de estudantes de engenharia
- Consist√™ncia de cen√°rio: Todas as perguntas devem se referir diretamente aos dados fornecidos na transcri√ß√£o
- Compet√™ncia alinhada: A compet√™ncia avaliada deve genuinamente corresponder ao que a pergunta exige
- Foco em engenharia: Princ√≠pios de termodin√¢mica, mec√¢nica, circuitos, estruturas, materiais, etc.

‚ö†Ô∏è IDIOMA OBRIGAT√ìRIO:
- TODO o texto em portugu√™s do Brasil
- Perguntas, op√ß√µes, explica√ß√µes e raz√µes dos distractors em portugu√™s
- NUNCA use ingl√™s

FORMATO DE SA√çDA (JSON OBRIGAT√ìRIO - SEM markdown):
{
  "questions": [
    {
      "id": 1,
      "type": "multiple-choice",
      "question": "Em um sistema termodin√¢mico fechado...",
      "options": [
        "Op√ß√£o correta com racioc√≠nio t√©cnico",
        "Distractor 1 - erro comum tipo A",
        "Distractor 2 - erro comum tipo B",
        "Distractor 3 - erro comum tipo C"
      ],
      "correctAnswer": 0,
      "explanation": "Explica√ß√£o detalhada com racioc√≠nio t√©cnico e passos de c√°lculo se aplic√°vel",
      "distractorReasons": [
        "Este distractor resulta de confundir sistema fechado com sistema isolado",
        "Este distractor vem de aplicar incorretamente a Primeira Lei da Termodin√¢mica",
        "Este distractor surge ao ignorar o trabalho realizado pelo sistema"
      ],
      "competencyAssessed": "Racioc√≠nio Anal√≠tico",
      "sourceTimestamp": "12:34"
    }
  ]
}

Gere 8-10 perguntas com foco em habilidades de ordem superior e compreens√£o profunda dos conceitos de engenharia.`
          },
          {
            role: 'user',
            content: `Gere um quiz focado em engenharia baseado nesta transcri√ß√£o de aula:\n\n${transcript || 'Aula de exemplo sobre an√°lise estrutural, c√°lculo de tens√µes em vigas e limites de deflex√£o em projetos de engenharia.'}`
          }
        ],
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Lovable AI Gateway error:', response.status, errorText);
      
      if (response.status === 429) {
        throw new Error('Rate limit exceeded. Please try again in a moment.');
      }
      if (response.status === 402) {
        throw new Error('AI credits depleted. Please add funds to continue.');
      }
      
      throw new Error(`AI Gateway error: ${response.status}`);
    }

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    // Parse the JSON response
    let quizData;
    try {
      // ‚úÖ Extrair JSON de markdown, se presente
      let jsonMatch = content.match(/\{[\s\S]*\}/);
      
      if (!jsonMatch) {
        console.error('No JSON found in AI response:', content);
        throw new Error('No valid JSON structure in AI response');
      }
      
      // ‚úÖ Sanitizar JSON removendo markdown
      let sanitizedJson = jsonMatch[0]
        .replace(/```json\s*/g, '')
        .replace(/```\s*/g, '')
        .replace(/\n\s*\n/g, '\n')
        .trim();
      
      quizData = JSON.parse(sanitizedJson);
      
      // ‚úÖ Validar estrutura
      if (!quizData.questions || !Array.isArray(quizData.questions)) {
        console.error('Invalid quiz structure:', quizData);
        throw new Error('Quiz data missing questions array');
      }
      
      console.log(`‚úÖ Parsed ${quizData.questions.length} questions successfully`);
      console.log('üåê Language check:', {
        hasPortuguese: JSON.stringify(quizData.questions).includes('√£') || JSON.stringify(quizData.questions).includes('√ß'),
        firstQuestion: quizData.questions[0]?.question?.substring(0, 80)
      });
    } catch (parseError) {
      console.error('Failed to parse quiz data:', parseError);
      console.error('Raw content:', content.substring(0, 500));
      throw new Error('Failed to parse quiz data from AI response');
    }

    console.log(`Successfully generated ${quizData.questions?.length || 0} questions`);

    return new Response(
      JSON.stringify({
        success: true,
        quiz: quizData,
        totalQuestions: quizData.questions?.length || 0
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error in generate-quiz function:', error);
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error' 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
